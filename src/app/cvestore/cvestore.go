package cvestore

import (
	"app/slack"
	"time"

	"appengine"
	"appengine/datastore"
)

type Item struct {
	CVE     string    `datastore:"cve" ,json:"cve"`
	Product string    `datastore:"product", json:"product"`
	Summary string    `datastore:"summary", json:"summary"`
	Link    string    `datastore:"link", json:"link"`
	Date    time.Time `datastore:"date", json:"date"`
}

func (i Item) SlackPayload() *slack.Payload {
	return &slack.Payload{
		Username: i.CVE,
		Attachments: []*slack.Attachment{
			{
				Pretext: i.Summary,
				Field: []slack.Field{
					{Title: "Product", Value: i.Product, Short: true},
					{Title: "Link", Value: i.Link, Short: true},
				},
				TimeStamp: i.Date.Unix(),
			},
		},
	}
}

const kind = "CVE"

func Put(ctx appengine.Context, item Item) error {
	key := datastore.NewKey(ctx, kind, item.CVE, 0, nil)
	_, err := datastore.Put(ctx, key, &item)
	return err
}

func Exist(ctx appengine.Context, cve string) (bool, error) {
	key := datastore.NewKey(ctx, kind, cve, 0, nil)
	var item Item
	switch err := datastore.Get(ctx, key, &item); err {
	case datastore.ErrNoSuchEntity:
		return false, nil
	case nil:
		return true, nil
	default:
		return false, err
	}
}
