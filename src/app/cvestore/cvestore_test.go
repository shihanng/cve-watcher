package cvestore

import (
	"app/slack"
	"testing"
	"time"

	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"

	"appengine/aetest"
)

var testItem = Item{
	CVE:     "test-id",
	Product: "test_product",
	Summary: "This is a test summary.",
	Link:    "https://example.com",
	Date:    time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC),
}

func TestSlackPayload(t *testing.T) {
	expected := &slack.Payload{
		Username: "test-id",
		Attachments: []*slack.Attachment{
			{
				Pretext: "This is a test summary.",
				Field: []slack.Field{
					{Title: "Product", Value: "test_product", Short: true},
					{Title: "Link", Value: "https://example.com", Short: true},
				},
				TimeStamp: time.Date(2009, time.November, 10, 23, 0, 0, 0, time.UTC).Unix(),
			},
		},
	}

	assert.Equal(t, expected, testItem.SlackPayload())
}

func TestPutExist(t *testing.T) {
	ctx, err := aetest.NewContext(nil)
	if err != nil {
		t.Fatal(err)
	}
	defer ctx.Close()

	assert.NoError(t, Put(ctx, testItem))
	assert.NoError(t, Put(ctx, testItem)) // Duplicate will overwrite

	testCases := []struct {
		id    string
		found bool
	}{
		{"test-id", true},
		{"unknown-id", false},
	}

	for _, tc := range testCases {
		actual, err := Exist(ctx, tc.id)
		require.NoError(t, err)
		assert.Equal(t, tc.found, actual)
	}
}
